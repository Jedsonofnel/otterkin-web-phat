package view

import (
	"fmt"
	"github.com/Jedsonofnel/otterkin-web/model"
	"github.com/Jedsonofnel/otterkin-web/view/components"
	"github.com/Jedsonofnel/otterkin-web/view/layout"
)

// public artist view page
type ArtistPageData struct {
	artist   model.Artist
	artworks []model.Artwork
	tags     map[string]model.Tags
}

func NewArtistPageData(
	artist model.Artist,
	artworks []model.Artwork,
	tags map[string]model.Tags,
) ArtistPageData {
	return ArtistPageData{
		artist:   artist,
		artworks: artworks,
		tags:     tags,
	}
}

templ ArtistPage(ld layout.LayoutData, apd ArtistPageData) {
	@layout.Default(ld) {
		<section class="artistpage-section">
			if len(apd.artworks) > 0 {
				@artistPageGallery(apd.artworks)
			}
		</section>
		<section class="artistpage-section artistpage-info">
			<div class="artistpage-header">
				<h1 class="artistpage-artist-name">{ apd.artist.User.FirstName } { apd.artist.User.LastName }</h1>
				@components.Avatar(components.AvatarProps{
					User: apd.artist.User,
				})
			</div>
			<div class="artistpage-tags-container">
				<div class="artistpage-tags">
					<div class="artistpage-tags-icon placeholder"></div>
					<div class="artistpage-tags-text">
						<p class="artistpage-tags-question">Where does the artist call home?</p>
						<p>NOT YET IMPLEMENTED</p>
					</div>
				</div>
				<div class="artistpage-tags">
					<div class="artistpage-tags-icon placeholder"></div>
					<div class="artistpage-tags-text">
						<p class="artistpage-tags-question">
							What make a piece
							<span style="font-style:italic">
								theirs
							</span>?
						</p>
						<div class="artistpage-tags-list">
							for _, tag := range apd.tags["subject"] {
								<span class="artistpage-tag">
									{ tag.Name }
								</span>
							}
							if len(apd.tags["subject"]) == 0 {
								<span class="artistpage-tag placeholder">
									We've not been told
								</span>
							}
						</div>
					</div>
				</div>
				<div class="artistpage-tags">
					<div class="artistpage-tags-icon placeholder"></div>
					<div class="artistpage-tags-text">
						<p class="artistpage-tags-question">
							With what mediums does the artist typically work?
						</p>
						<div class="artistpage-tags-list">
							for _, tag := range apd.tags["medium"] {
								<span class="artistpage-tag">
									{ tag.Name }
								</span>
							}
							if len(apd.tags["medium"]) == 0 {
								<span class="artistpage-tag placeholder">
									We've not been told
								</span>
							}
						</div>
					</div>
				</div>
				<div class="artistpage-tags">
					<div class="artistpage-tags-icon placeholder"></div>
					<div class="artistpage-tags-text">
						<p class="artistpage-tags-question">
							What styles does the artist love working in?
						</p>
						<div class="artistpage-tags-list">
							for _, tag := range apd.tags["style"] {
								<span class="artistpage-tag">
									{ tag.Name }
								</span>
							}
							if len(apd.tags["style"]) == 0 {
								<span class="artistpage-tag placeholder">
									We've not been told
								</span>
							}
						</div>
					</div>
				</div>
				<div class="artistpage-tags">
					<div class="artistpage-tags-icon placeholder"></div>
					<div class="artistpage-tags-text">
						<p class="artistpage-tags-question">
							How long does the artist typically need?
						</p>
						<p>NOT YET IMPLMENTED</p>
					</div>
				</div>
			</div>
			<div class="artistpage-about-container">
				<h2 class="artistpage-subheading">About</h2>
				<p>
					{ apd.artist.Biography }
				</p>
			</div>
			<div class="artistpage-payment-container">
				<p class="artistpage-price-text">
					<span class="artistpage-price">Â£4000</span> apiece
				</p>
				<p>Also need the option to pick from services</p>
				<p>Payment black box</p>
			</div>
		</section>
	}
}

// public artist gallery
templ ArtistGalleryPage(ld layout.LayoutData, agd ArtistGalleryPageData) {
	@layout.Default(ld) {
		<section class="artistpage-section">
			<div class="artistgallery-header-container">
				<h1>
					<span class="artistgallery-artist-name">{ agd.artist.User.FirstName } { agd.artist.User.LastName }</span>
				</h1>
				<a class="button soft" href={ templ.URL(fmt.Sprintf("/artist/%s", agd.artist.Id)) }>Go Back</a>
			</div>
			<div class="artistgallery-gallery-container">
				for _, artwork := range agd.artworks {
					@ArtworkExpandWrapper(artwork) {
						@LoadImageSquare(fmt.Sprintf("/artwork/%s", artwork.Id))
					}
				}
			</div>
		</section>
	}
}

// profile edit page
type ArtistProfilePageData struct {
	artist     model.Artist
	tagOptions map[string]model.Tags
	artistTags map[string]model.Tags
}

func NewArtistProfilePageData(
	artist model.Artist,
	tagOptions map[string]model.Tags,
	artistTags map[string]model.Tags,
) ArtistProfilePageData {
	return ArtistProfilePageData{
		artist:     artist,
		tagOptions: tagOptions,
		artistTags: artistTags,
	}
}

templ ArtistProfilePage(ld layout.LayoutData, apd ArtistProfilePageData) {
	@layout.Dashboard(ld, "artist-settings") {
		<section class="dashboard-section fw" hx-boost>
			<h1 class="dashboard-title" id="artist-greeting">Hello { apd.artist.User.FirstName }</h1>
			if !apd.artist.Approved {
				<p>
					You haven't yet been approved. Our team should be in touch (if they aren't already)
					very soon and we hope to get you on your way before long!
				</p>
			}
			<a href={ templ.URL(fmt.Sprintf("/artist/%s", apd.artist.Id)) }>See your profile</a>
		</section>
		<section class="dashboard-section">
			<div class="dashboard-subtitle-container text-baseline">
				<h2 class="dashboard-subtitle">Artist details</h2>
				<div data-save-indicator="#artist-details" class="save-indicator snug" hidden>Saving...</div>
			</div>
			@artistUpdateForm(apd.artist)
		</section>
		<section class="dashboard-section">
			<h2 class="dashboard-subtitle">Artist tags</h2>
			@artistTagInputs(apd)
		</section>
		<section class="dashboard-section fw">
			<div class="dashboard-subtitle-container text-baseline">
				<h2 class="dashboard-subtitle">Biography</h2>
				<div data-save-indicator="#biography" class="save-indicator snug" hidden>Saving...</div>
			</div>
			<p class="fw">
				This should be in the third person - it will go under an "about" section in your profile
			</p>
			<textarea
				id="biography"
				class="textarea-input fw"
				rows="10"
				name="biography"
				hx-put={ fmt.Sprintf("/artist/profile/%s/biography", apd.artist.Id) }
				hx-trigger="keyup changed delay:500ms"
				hx-swap="none"
			>
				{ apd.artist.Biography }
			</textarea>
		</section>
		<section class="dashboard-section fw">
			<div class="dashboard-subtitle-container">
				<h2 class="dashboard-subtitle">Your Services</h2>
				<button class="button soft" hx-get="/service/table/create-modal" hx-target="body" hx-swap="beforeend">
					Add
				</button>
			</div>
			<div hx-get={ fmt.Sprintf("/service/table?artist=%s", apd.artist.Id) } hx-trigger="load" hx-swap="outerHTML"></div>
		</section>
	}
}

templ SavedIndicator(id string) {
	<div hx-swap-oob={ fmt.Sprintf(`innerHTML:[data-save-indicator="%s" ]`, id) }>Saved</div>
}

templ artistTagInputs(apd ArtistProfilePageData) {
	@components.DropdownMultiSelect(components.DropdownMultiSelectProps{
		Name:      "mediums",
		Options:   apd.tagOptions["medium"].ToMap(),
		Selected:  apd.artistTags["medium"].ToMap(),
		AddURL:    fmt.Sprintf("/artist/profile/%s/tags", apd.artist.Id),
		DeleteURL: fmt.Sprintf("/artist/profile/%s/tags", apd.artist.Id),
	})
	@components.DropdownMultiSelect(components.DropdownMultiSelectProps{
		Name:      "styles",
		Options:   apd.tagOptions["style"].ToMap(),
		Selected:  apd.artistTags["style"].ToMap(),
		AddURL:    fmt.Sprintf("/artist/profile/%s/tags", apd.artist.Id),
		DeleteURL: fmt.Sprintf("/artist/profile/%s/tags", apd.artist.Id),
	})
	@components.DropdownMultiSelect(components.DropdownMultiSelectProps{
		Name:      "subjects",
		Options:   apd.tagOptions["subject"].ToMap(),
		Selected:  apd.artistTags["subject"].ToMap(),
		AddURL:    fmt.Sprintf("/artist/profile/%s/tags", apd.artist.Id),
		DeleteURL: fmt.Sprintf("/artist/profile/%s/tags", apd.artist.Id),
	})
}

templ artistUpdateForm(artist model.Artist) {
	<form
		id="artist-details"
		hx-put={ fmt.Sprintf("/artist/profile/%s", artist.Id) }
		hx-trigger="keyup delay:500ms"
		hx-swap="none"
		class="stack"
	>
		<div class="form-field">
			<label for="instagram_handle">Instagram Handle</label>
			<input
				class="text-input"
				id="instagram_handle"
				name="instagram_handle"
				type="text"
				value={ artist.InstagramHandle }
			/>
		</div>
		<div class="form-field">
			<label for="location">Your Location</label>
			<input class="text-input" id="location" name="location" type="text" value={ artist.Location }/>
		</div>
	</form>
}

templ ArtistUpdateResponse(artist model.Artist) {
	@artistUpdateForm(artist)
	<h1 class="dashboard-title" id="artist-greeting" hx-swap-oob="outerHTML">Hello { artist.User.FirstName }</h1>
	@layout.FlashInfo("Updated your details!")
}

// gallery page
type ArtistGalleryPageData struct {
	artist   model.Artist
	artworks []model.Artwork
}

func NewArtistGalleryPageData(artist model.Artist, artworks []model.Artwork) ArtistGalleryPageData {
	return ArtistGalleryPageData{
		artist:   artist,
		artworks: artworks,
	}
}

templ ArtistProfileGalleryPage(ld layout.LayoutData, agd ArtistGalleryPageData) {
	@layout.Dashboard(ld, "artist-gallery") {
		<section class="dashboard-section fw">
			<h1 class="dashboard-title">Your gallery</h1>
			<p>Upload your artwork for patrons to get a little taste of what you're capable of.</p>
			<button
				class="button soft"
				hx-get={ fmt.Sprintf("/artist/profile/%s/gallery/add-modal", agd.artist.Id) }
				hx-target="body"
				hx-swap="beforeend"
			>Add</button>
		</section>
		<section class="dashboard-section fw">
			@artistGallery() {
				for _, image := range agd.artworks {
					@EditableArtwork(image)
				}
			}
		</section>
	}
}

templ ArtistGalleryAddModal(artist model.Artist) {
	@components.Modal() {
		@artistGalleryForm(artist, model.Artwork{}, false)
	}
}

templ ArtistGalleryUpdateModal(artist model.Artist, artwork model.Artwork) {
	@components.Modal() {
		@artistGalleryForm(artist, artwork, true)
	}
}

templ artistGalleryForm(
	artist model.Artist,
	artwork model.Artwork,
	updateForm bool,
) {
	<form
		if updateForm {
			hx-put={ fmt.Sprintf("/artwork/%s", artwork.Id) }
		} else {
			hx-post={ fmt.Sprintf("/artist/profile/%s/gallery", artist.Id) }
		}
		enctype="multipart/form-data"
		hx-target="#artist-gallery"
		hx-swap="beforeend"
		data-image-preview-form
	>
		<div class="split-form">
			<div class="column-form">
				<h2 class="dashboard-subtitle">
					if updateForm {
						Update your artwork
					} else {
						Add your artwork
					}
				</h2>
				<div class="form-field">
					<label for="title">Title</label>
					<input class="text-input" id="title" name="title" type="text" value={ artwork.Title }/>
				</div>
				<div class="form-field">
					<label for="description">Description (optional)</label>
					<textarea class="textarea-input" id="description" name="description" rows="3" maxlength="128">
						{ artwork.Description }
					</textarea>
				</div>
				if updateForm {
					<div class="form-field">
						@components.ToggleButton(components.ToggleButtonProps{
							Value:     artwork.Visible,
							Name:      "visible",
							TrueText:  "Visible",
							FalseText: "Hidden",
						})
					</div>
				} else {
					<input type="hidden" name="visible" value="true"/>
				}
				<input type="hidden" name="artist_id" value={ artist.Id }/>
				<div class="form-field">
					<label for="image" hidden="true">Image</label>
					<input id="image" class="file-input" name="image" type="file" accept="image/*" data-image-preview-input/>
				</div>
			</div>
			<div class="gallery-preview-container">
				<img
					data-image-preview-img
					if artwork.Id !="" {
						src={ fmt.Sprintf("/api/files/artworks/%s/%s", artwork.Id,
        artwork.Image) }
					}
					class="image-preview"
				/>
			</div>
		</div>
		<div class="modal-bottom">
			<button type="button" class="button text" data-modal-close-btn>Close</button>
			if updateForm {
				<input class="button primary" type="submit" value="Update image"/>
			} else {
				<input class="button primary" type="submit" value="Add image"/>
			}
		</div>
	</form>
}

templ ArtistGalleryFormError(errMap map[string]string) {
	for field, value := range errMap {
		<div hx-swap-oob={ fmt.Sprintf("afterend:#%s", field) }>
			<p class="error-message">{ value }</p>
		</div>
	}
}
